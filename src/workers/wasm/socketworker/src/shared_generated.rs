// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum UserIdOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UserId<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UserId<'a> {
  type Inner = UserId<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> UserId<'a> {
  pub const VT_NUM: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    UserId { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args UserIdArgs
  ) -> flatbuffers::WIPOffset<UserId<'bldr>> {
    let mut builder = UserIdBuilder::new(_fbb);
    builder.add_num(args.num);
    builder.finish()
  }


  #[inline]
  pub fn num(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(UserId::VT_NUM, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for UserId<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("num", Self::VT_NUM, false)?
     .finish();
    Ok(())
  }
}
pub struct UserIdArgs {
    pub num: u64,
}
impl<'a> Default for UserIdArgs {
  #[inline]
  fn default() -> Self {
    UserIdArgs {
      num: 0,
    }
  }
}

pub struct UserIdBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> UserIdBuilder<'a, 'b> {
  #[inline]
  pub fn add_num(&mut self, num: u64) {
    self.fbb_.push_slot::<u64>(UserId::VT_NUM, num, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> UserIdBuilder<'a, 'b> {
    let start = _fbb.start_table();
    UserIdBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UserId<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for UserId<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("UserId");
      ds.field("num", &self.num());
      ds.finish()
  }
}
pub enum UnixTimestampOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UnixTimestamp<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UnixTimestamp<'a> {
  type Inner = UnixTimestamp<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> UnixTimestamp<'a> {
  pub const VT_SINCE_EPOCH: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    UnixTimestamp { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args UnixTimestampArgs
  ) -> flatbuffers::WIPOffset<UnixTimestamp<'bldr>> {
    let mut builder = UnixTimestampBuilder::new(_fbb);
    builder.add_since_epoch(args.since_epoch);
    builder.finish()
  }


  #[inline]
  pub fn since_epoch(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(UnixTimestamp::VT_SINCE_EPOCH, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for UnixTimestamp<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("since_epoch", Self::VT_SINCE_EPOCH, false)?
     .finish();
    Ok(())
  }
}
pub struct UnixTimestampArgs {
    pub since_epoch: u64,
}
impl<'a> Default for UnixTimestampArgs {
  #[inline]
  fn default() -> Self {
    UnixTimestampArgs {
      since_epoch: 0,
    }
  }
}

pub struct UnixTimestampBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> UnixTimestampBuilder<'a, 'b> {
  #[inline]
  pub fn add_since_epoch(&mut self, since_epoch: u64) {
    self.fbb_.push_slot::<u64>(UnixTimestamp::VT_SINCE_EPOCH, since_epoch, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> UnixTimestampBuilder<'a, 'b> {
    let start = _fbb.start_table();
    UnixTimestampBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UnixTimestamp<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for UnixTimestamp<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("UnixTimestamp");
      ds.field("since_epoch", &self.since_epoch());
      ds.finish()
  }
}
